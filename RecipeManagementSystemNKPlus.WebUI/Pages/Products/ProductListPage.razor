@page "/products"

<h3>Products</h3>


<div class="container-fluid">
    @if (_products is null)
    {
        <p>Loading...</p>
    }
    else
    {
        <button class="btn btn-success mb-3" type="submit" @onclick="AddProduct">
            <i class="bi bi-plus"></i>
            Add New
        </button>
        <div class="row">
            <table class="table table-bordered text-center justify-content-center">
                <thead>
                    <tr>
                        <th>Product Name</th>
                        <th>Quantity</th>
                        <th>Weight</th>
                        <th>Description</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var product in _products)
                    {
                        <tr>
                            <td>@product.Name</td>
                            <td>@product.Quantity</td>
                            <td>@product.Weight</td>
                            <td>@product.Description</td>
                            <td>
                                <div class="d-grid gap-2 d-md-block">
                                    <button class="btn btn-warning" type="button" @onclick="() => EditProduct(product)">
                                        <i class="bi bi-pencil"></i>
                                        Edit
                                    </button>
                                    <button class="btn btn-danger " type="button" @onclick="async () => await DeleteProduct(product)">
                                        <i class="bi bi-trash"></i>
                                        Delete
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>


@code {
    private List<Product>? _products = new();
    private Product _product = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        _products = await ProductService.GetAllAsync(Constant.ProductBaseUrl);
        StateHasChanged();
    }

    private void AddProduct() => NavManager.NavigateTo("/product/add");

    private void EditProduct(Product product) => NavManager.NavigateTo($"/product/edit/{product.Id}");

    private async Task DeleteProduct(Product product)
    {
        var response = await ProductService.DeleteAsync(Constant.ProductBaseUrl, product.Id);
        await LoadData();
    }
}