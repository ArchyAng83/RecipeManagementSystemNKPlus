@page "/product/addingredients/{prodId:int}/{ctId:int}"

<h3>@message</h3>

<div class="row g-3 align-items-center">
    <EditForm Model="_ingredient">
        <div class="form-group row">
            <div class="col-auto">
                <label for="name" class="col-auto col-form-label">
                    Ingredient Name:
                </label>
            </div>
            <div class="col-4">
                <div class="col-lg-auto mb-3">
                    <InputSelect id="name" class="form-control" @bind-Value="ingId">
                        @foreach (var ing in _ingredients!)
                        {
                            <option value="@ing.Id">@ing.Name</option>
                        }
                    </InputSelect>
                </div>
            </div>
            <div class="col-auto">
                <label for="weight" class="col-auto col-form-label">
                    Weight:
                </label>
            </div>
            <div class="col-2">
                <div class="col-lg-auto mb-3">
                    <InputNumber id="weight" class="form-control" @bind-Value="ingWeight" />
                </div>
            </div>
            <div class="col-auto">
            <button class="btn btn-success" type="submit" @onclick="() => AddToCompositeType()">
                    <i class="bi bi-plus"></i>                    
                </button>
            </div>   
        </div>
    </EditForm>    
</div>

<div class="row">
    <table class="table table-bordered text-center justify-content-center">
        <thead>
            <tr>
                <th>Ingredient</th>
                <th>Weight</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ingredient in _compositeType!.Ingredients!)
            {
                <tr>
                    <td>@ingredient.Name</td>
                    <td>@ingredient.Composites!.Where(c => c.CompositeTypeId == _compositeType.Id).First().Weight</td>
                    <td>
                        <button class="btn btn-danger " type="button" @onclick="() => DeleteFromCompositeType(ingredient)">
                            <i class="bi bi-x"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
<button class="btn btn-success" type="submit" @onclick="async () => await SaveProductAsync()">
    <i class="bi bi-check2"></i>
    Save
</button>

@code {
    [Parameter]
    public int ProdId { get; set; }

    [Parameter]
    public int CtId { get; set; }

    private int ingId;

    private CompositeType? _compositeType = new();

    private Product? _product = new();

    private Ingredient? _ingredient = new();

    private List<Ingredient>? _ingredients = new();

    private double ingWeight = 0;

    private string message = "";

    protected override async Task OnInitializedAsync()
    {
        _ingredients = await IngredientService.GetAllAsync(Constant.IngredientBaseUrl);

        _product = await ProductService.GetByIdAsync(Constant.ProductBaseUrl, ProdId);

        _compositeType = _product!.CompositeTypes!.Where(ct => ct.Id == CtId).FirstOrDefault();

        if (_compositeType is null)
        {
            var compositeTypes = await CompositeTypeService.GetAllAsync(Constant.CompositeTypeBaseUrl);
            _compositeType = compositeTypes!.FirstOrDefault();
            _product.CompositeTypes!.Add(_compositeType!);
        }

        message = $"{_product.Name} {_compositeType!.Name}";
    }

    private void DeleteFromCompositeType(Ingredient ingredient)
    {
        _compositeType!.Ingredients!.Remove(ingredient);

        var composite = _product!.Composites!.Where(c => c.CompositeTypeId == CtId && c.IngredientId == ingredient.Id).FirstOrDefault();

        _product.Composites!.Remove(composite!);
    }

    private async Task AddToCompositeType()
    {
        var ing = await IngredientService.GetByIdAsync(Constant.IngredientBaseUrl, ingId);

        if (!_compositeType!.Ingredients!.Any(i => i.Id == ing!.Id))
        {
            var composite = new Composite
                {
                    ProductId = _product!.Id,
                    CompositeTypeId = _compositeType.Id,
                    IngredientId = ing!.Id,
                    Weight = ingWeight
                };

            ing!.Composites!.Add(composite);

            _compositeType!.Ingredients!.Add(ing!);

            _product.Composites!.Add(composite);
        }

    }

    private async Task SaveProductAsync()
    {
        if (_product!.Composites!.Count <= 0)
            return;

        var newProduct = new ProductDto
            {
                Id = _product!.Id,
                Name = _product.Name,
                Quantity = _product.Quantity,
                Weight = _product.Weight,
                Description = _product.Description,
                Composites = _product.Composites!.Select(c => new CompositeDto
                {
                    ProductId = c.ProductId,
                    CompositeTypeId = c.CompositeTypeId,
                    IngredientId = c.IngredientId,
                    Weight = c.Weight
                }).ToList()
            };


        var response = await ProductDtoService.UpdateAsync($"{Constant.ProductBaseUrl}/addcomposite", newProduct);

        NavManager.NavigateTo($"/product/details/{_product!.Id}");
    }
}
